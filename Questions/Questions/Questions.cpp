#include <math.h>
#include <iostream>

int main()
{
	//1.6.3 Перечислите и охарактеризуйте базовые типы языка С
	int a = 0;
	bool b = false;
	double c = 1.0;
	char d = 'c';
	//Перечислите и охарактеризуйте квалификаторы языка С.
	const int con = 1;
	short int a1;
	long int a2;
	//1.6.5 Что такое приведение типа ?

	//1.6.6 Перечислите и охарактеризуйте арифметические операторы.
	a = a + b;
	a = a - b;
	a = a * b;
	a = a / a;
	a = a % a;
	//1.6.7 Перечислите и охарактеризуйте операторы отношения.
	a == b;
	a != b;
	a < b;
	a <= b;
	a > b;
	a >= b;
	//1.6.8 Перечислите и охарактеризуйте логические операторы.
	a && b;
	a || b;
	!a;
	//1.6.9 Перечислите и охарактеризуйте операторы присваивания.
	a = a;
	a += b;
	a -= b;
	a *= b;
	a /= b;
	a++;
	a--;

	//1.6.11 Опишите средства ввода - вывода языка С++.
	cout << "a";
	cin >> a;
	//1.6.12 Опишите инструкцию if - else.
	if (a < 0)
	{
		cout << "a<0";
	}
	else
	{
		cout << "a>=0";
	}
	//1.6.13 Что такое условное выражение ? 
	z = (a > b) ? a : b;
	//1.6.14 Опишите инструкцию switch.
	switch (a)
	{
	case 0:cout << "0";

	case 1: cout << "1";
	}
}
		//1.6.15 Опишите математические функции файла <math.h>.
a = sin(1);
a = cos(1);
a = tan(1);
a = acos(1);
a = asin(1);
a = pow(2, 2);


	//2.6.1 Что называют циклом ?
	// Участок программы выполняяемый многократно. while,do-while,for.
		//2.6.2 Какие три элемента должны входить в цикл ?
		
		//2.6.3 Перечислите типы циклов в языках С / С++.
		// while,do-while,for
		//2.6.4 Охарактеризуйте цикл с предусловием.
		//  это значит, что решение о выполнении еще одной итерации цикла принимается перед началом цикла
		//2.6.5 Охарактеризуйте цикл с постусловием.
		// проверка   продолжения цикла(<выражение>) выполняется после каждого прохождения тела цикла(<инструкция>).

		//2.6.6 Охарактеризуйте цикл while.
 while (int i < 10)
   {
	cout << i << "*" << i << "=" << i * i << endl;
	i++;
   }
		//2.6.7 Охарактеризуйте цикл do - while.
int i = 6;
do
{
	std::cout << i << std::endl;
	i--;
}     while (i > 0);

return 0;
		//2.6.8 Охарактеризуйте цикл for.

for (int i = 1; i < 10; i++)
{
	std::cout << i << " * " << i << " = " << i * i << std::endl;
}
		//2.6.9 Опишите инструкции break и continue.
int i = 1;
for (; ; )
{
	std::cout << i << " * " << i << " = " << i * i << std::endl;
	i++;
	if (i > 9) break;
}
int result = 0;
for (int i = 0; i < 10; i++)
{
	if (i % 2 == 0) continue;
	result += i;
}
std::cout << "result = " << result << std::endl; /
		//2.6.10 В каких случаях целесообразно применять оператор запятая ?
	//Оператор запятая наиболее часто применяется в цикле for.
		//2.6.11 Какой тип цикла лучше использовать в задаче табулирования функции ? Почему ?
		//for
		//2.6.12 Дайте характеристику флагам состояния формата, используемым в функции setf объекта cout
		// Флаг ios::showpoint устанавливается для вывода чисел с обязательной печатью десятичной точки и нулевых младших разрядов
		// Флаги ios::left и ios::right содержатся в статическом элементе данных ios::adjustfield и позволяют выравнивать печать соответственно по левой или правой границам поля.
		// Флаги ios::fixed и ios::scientific, управляющие форматом вывода вещественных чисел
	//3.6.1 Как в языках С/С++ описываются одномерные массивы?
	//одномерные массивы описываются следующим образом :
//тип имя_массива[размер_массива];

	//3.6.2 Каковы особенности инициализации массива при его объявлении ?
	// 
		//3.6.3 Как объявить переменную типа указатель ?
		 int *p;
		//3.6.4 Охарактеризуйте оператор адресации & и оператор раскрытия ссылки * .
		 p=&a;
		//3.6.5 Охарактеризуйте операторы new и delete.
		 int *p=new int;
		 delete p;
		//3.6.6 Опишите функции malloc и free.
		 x = (int*)malloc;
		//3.6.7 Перечислите наиболее распространенные ошибки, связанные с использованием указателей.
		// Утечка памяти.неосвобождение памяти,
		//3.6.8 Охарактеризуйте связь между массивами и указателями.
		// Имя массива является константой-указателем и содержит адрес области  памяти, которую занимает набор последовательных ячеек, соответствующих массиву.
		//3.6.9 Какие действия можно выполнять над указателями ?
		// Операторы отношения ,вычитание указателей
		//3.6.10 Что такое динамические массивы ?
		// Массив в которов колличестов элементов изначально неизвестно
	    //3.6.11 Как выделить память под динамический массив ?
		// int *a=new int[n];
		//3.6.12 Опишите алгоритмы сортировки массивов методами прямого обмена, вставки и прямого выбора.Каковы особенности реализации данных алгоритмов средствами языков С / С++ ?
		// // сортировка массива методом прямого обмена
		 for (i = m - 1;i;i--)
			 for (j = 0;j < i;j++)
				 if (a[j] > a[j + 1])
					 temp = a[j], a[j] = a[j + 1], a[j + 1] = temp;
	//4.6.1 Как в языках С / С++ представляются двумерные массивы ?
	// Двумерный массив в С/С++ представляется как массив, состоящий из массивов. 
		//4.6.2 Как осуществляется доступ к элементам двумерного массива ?
		// Для доступа к отдельному элементу массива применяется конструкция вида 
		 a[i][j]
		//4.6.3 Каким образом осуществляется инициализация двумерных массивов ?
		int a[3][5];
		//4.6.4 Как выделить память под динамический двумерный массив ?
		 int nrow, ncol;
		 cout << ”Введите количество строк и столбцов : ”
			 cin >> nrow >> ncol;
		 int** a = new int* [nrow]; // 1
		 for (int i = 0;i < nrow;i++) // 2
			 a[i] = new int[ncol];
		//4.6.5 Приведите формат заголовка функции.
		// int main();
		// void main();
		//4.6.6 Что является телом функции ?
		// Тело функции представляет собой блок, заключенный в фигурные скобки. 
		//4.6.7 В чем состоит механизм передачи параметров в функцию ?
		// Параметры передаются в функцию как параметры-значения. Иными словами,  функция работает с копией значений, которые ей передаются.

		//4.6.8 Что такое ссылочные переменные ? В каких случаях их целесообразно использовать ?
		// Ссылка — это переменная, которая  ассоциирована с другой переменной и содержит ее адреc
		// 
		//4.6.9 Что такое аргументы по умолчанию ?
		// 
		//4.6.10 Как осуществляется передача массивов в функции ? 
		// int SumOfA(int a[MAX]) или int SumOfA(int a[],int n);
		// int SumOfA(const int *a,int n)
		// int SumOfMatrix(int **matrix,int nrow,int ncol);Двумерный массив
		//4.6.11 Напишите функцию, выполняющую поиск номера строки матрицы, в которой находиться минимальный элемент.
		 int min=mass[0][0];
		 int numbstring;
		 for (int i = 0;i < n;i++)
			 for (int j = 0;j < m;j++)
			 {
				 if (mass[i][j] < min)
				 {
					 min = mass[i][j];
					 numbstring = i;
				 }
			 }
		 cout << numbstring;

		//4.6.12 Напишите функцию, выполняющую перестановку 2 - х заданных строк (столбцов) матрицы.
		 int nrow, ncol;
		 cout << ”Введите количество строк и столбцов : ”
			 cin >> nrow >> ncol;
		 int** a = new int* [nrow];
		 for (int i = 0;i < nrow;i++) 
			 a[i] = new int[ncol];


		 for (int i = 0;i < nrow; i++)
		 {
			 for (int j = 0;j < ncol;j++)
			 {
				 cout << "write element :";
				 cin >> a[i][j];
			 }

		 int nrow1, ncol1;
		 nrow1 = nrow;
		 ncol = ncol;
		 int** b = new int* [nrow1]; 
		 for (int i = 0;i < nrow1;i++) 
			 b[i] = new int[ncol1];

		 int n1;
		 int n2;
		 for (int i = 0; i < nrow; i++)
		 {
			 for (int j = 0;j < ncol;j++)
			 {
				 if (j=n1)
				 {
					 
					 n1 = n2;
					 buff = n1;
				 }
				 else if (j = n2)
				 {
					 n2 = buff;
				 }
				 a[i][j] = b[i][j];
			 }
		 }
}
